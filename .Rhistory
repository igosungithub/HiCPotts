attributes(log_class) <- NULL
confusion <- confusionMatrix(as.factor(log_class), as.factor(test_data$RESULT))
print(confusion)
# Train Naive Bayes model
nb_model <- naiveBayes(RESULT ~ ., data = train_data)
print(nb_model)
# Predict class labels
nb_predictions <- predict(nb_model, newdata = test_data)
# Predict probabilities
nb_probabilities <- predict(nb_model, newdata = test_data, type = "raw")
# Evaluate model
library(caret)
confusion <- confusionMatrix(nb_predictions, test_data$RESULT)
View(nb_probabilities)
# Predict class labels
nb_predictions <- predict(nb_model, newdata = test_data)
# Predict probabilities
nb_probabilities <- predict(nb_model, newdata = test_data)
# Evaluate model
library(caret)
confusion <- confusionMatrix(nb_predictions, test_data$RESULT)
str(nb_predictions)
# Predict class labels
nb_predictions <- predict(nb_model, newdata = test_data)
# Predict probabilities
nb_probabilities <- predict(nb_model, newdata = test_data, type = "raw")
# Evaluate model
library(caret)
confusion <- confusionMatrix(nb_predictions, test_data$RESULT)
# Remove attributes
attributes(log_class) <- NULL
confusion <- confusionMatrix(nb_predictions, test_data$RESULT)
confusion <- confusionMatrix(as.factor(nb_predictions), as.factor(test_data$RESULT))
print(confusion)
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
is.factor(mydata3$RESULT)
mydata3$RESULT<-as.factor(mydata3$RESULT)
train_data <- mydata3[train_indices1, ]
test_data <- mydata3[-train_indices1, ]
# Train a decision tree
tree_model <- rpart(RESULT ~ ., data = train_data, method = "class")
# Print the tree summary
print(tree_model)
summary(tree_model)
# Visualize the decision tree
rpart.plot(tree_model, type = 3, extra = 101, fallen.leaves = TRUE)
# Visualize the decision tree
rpart.plot(tree_model, type = 0, extra = 101, fallen.leaves = TRUE)
# Visualize the decision tree
rpart.plot(tree_model, type = 0, extra = 101, fallen.leaves = FALSE)
View(tree_model)
# Predict class labels
tree_predictions <- predict(tree_model, newdata = test_data, type = "class")
# Predict probabilities
tree_probabilities <- predict(tree_model, newdata = test_data, type = "prob")
# Evaluate the model
confusion <- confusionMatrix(tree_predictions, test_data$RESULT)
library(caret)
# Evaluate the model
confusion <- confusionMatrix(tree_predictions, test_data$RESULT)
print(confusion)
5004/(5004+15524)
tree_model[["frame"]][["var"]]
tree_model[["terms"]]
cor(mydata3)
install.packages("C:/Users/hitun/Desktop/Thesis/Writing/HMRFHiC_0.1.0.tar.gz", repos = NULL, type = "source")
library(HMRFHiC)
bb <- get_data(
file_path      = "C:/Users/hitun/Downloads/package/BG3_WT_merged_hic_chr4_2Kb.cool",
chr            = "chr2L",
start          = 1,
end            = 40000,
resolution     = 2000,
genome_package = "BSgenome.Dmelanogaster.UCSC.dm6",
acc_wig        = "C:/Users/hitun/Downloads/package/other/BG3.r2c.dhs.density.wig",
chain_file     = "C:/Users/hitun/Downloads/package/dm3ToDm6.over.chain",
te_granges     = "C:/Users/hitun/Downloads/package/dm6_TEs.gtf"
)
bb <- get_data(
file_path      = "C:/Users/hitun/Downloads/package/BG3_WT_merged_hic_chr4_2Kb.cool",
chr            = "chr4",
start          = 1,
end            = 40000,
resolution     = 2000,
genome_package = "BSgenome.Dmelanogaster.UCSC.dm6",
acc_wig        = "C:/Users/hitun/Downloads/package/other/BG3.r2c.dhs.density.wig",
chain_file     = "C:/Users/hitun/Downloads/package/dm3ToDm6.over.chain",
te_granges     = "C:/Users/hitun/Downloads/package/dm6_TEs.gtf"
)
processed <- CSV_process_data(df, N=10, scale_max=500, standardization_y=TRUE)
processed <- CSV_process_data(bb, N=20, scale_max=500, standardization_y=TRUE)
# Extract covariates and interaction matrices
x_vars <- processed$x_vars
y_matrices <- processed$y
N <- 20
gamma_prior <- 0.3
iterations <- 500
theta_start <- 0.5
size_start <- c(1,1,1)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
x_vars = x_vars,
y = y,
theta_start = theta_start,
use_data_priors = TRUE,
user_fixed_priors = FALSE,
epsilon = NULL,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
N <- 20
gamma_prior <- 0.3
iterations <- 500
theta_start <- 0.5
size_start <- c(1,1,1)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
x_vars = x_vars,
y = y_matrices,
theta_start = theta_start,
use_data_priors = TRUE,
user_fixed_priors = FALSE,
epsilon = NULL,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
N <- 20
gamma_prior <- 0.3
iterations <- 500
theta_start <- 0.5
size_start <- c(1,1,1)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
x_vars = x_vars,
y = y_matrices,
theta_start = theta_start,
use_data_priors = TRUE,
epsilon = NULL,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
x_vars = x_vars,
y = y_matrices,
theta_start = theta_start,
use_data_priors = TRUE,
epsilon = NULL,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
warnings()
traceback()
remove.packages("HMRFHiC")
install.packages("C:/Users/hitun/Desktop/Thesis/Writing/HMRFHiC_0.1.0.tar.gz", repos = NULL, type = "source")
library(HMRFHiC)
bb <- get_data(
file_path      = "C:/Users/hitun/Downloads/package/BG3_WT_merged_hic_chr4_2Kb.cool",
chr            = "chr4",
start          = 1,
end            = 40000,
resolution     = 2000,
genome_package = "BSgenome.Dmelanogaster.UCSC.dm6",
acc_wig        = "C:/Users/hitun/Downloads/package/other/BG3.r2c.dhs.density.wig",
chain_file     = "C:/Users/hitun/Downloads/package/dm3ToDm6.over.chain",
te_granges     = "C:/Users/hitun/Downloads/package/dm6_TEs_chr4.gtf.gz"
)
View(bb)
processed <- process_data(bb, N=20, scale_max=500, standardization_y=TRUE)
x_vars <- processed$x_vars
y_matrices <- processed$y
N <- 20
gamma_prior <- 0.3
iterations <- 2000
theta_start <- 0.5
size_start <- c(1,1,1)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
x_vars = x_vars,
y = y_matrices,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
x_vars_arg = x_vars,
y_arg = y_matrices,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
traceback()
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
y_arg = y_matrices,
x_vars_arg = x_vars,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
y = y_matrices,
x_vars_arg = x_vars,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
y <- processed$y
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
y_arg = y,
x_vars_arg = x_vars,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = processed,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = as.dataframe(processed),
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = as.data.frame(processed),
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = bb,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
View(bb)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = as.data.frame(bb),
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
is.data.frame(bb)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = bb,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
traceback()
View(processed)
remove.packages("HMRFHiC")
install.packages("C:/Users/hitun/Desktop/Thesis/Writing/HMRFHiC_0.1.0.tar.gz", repos = NULL, type = "source")
library(HMRFHiC)
bb <- get_data(
file_path      = "C:/Users/hitun/Downloads/package/BG3_WT_merged_hic_chr4_2Kb.cool",
chr            = "chr4",
start          = 1,
end            = 40000,
resolution     = 2000,
genome_package = "BSgenome.Dmelanogaster.UCSC.dm6",
acc_wig        = "C:/Users/hitun/Downloads/package/other/BG3.r2c.dhs.density.wig",
chain_file     = "C:/Users/hitun/Downloads/package/dm3ToDm6.over.chain",
te_granges     = "C:/Users/hitun/Downloads/package/dm6_TEs_chr4.gtf.gz"
)
processed <- process_data(bb, N=20, scale_max=500, standardization_y=TRUE)
x_vars <- processed$x_vars
y <- processed$y
N <- 20
gamma_prior <- 0.3
iterations <- 2000
theta_start <- 0.5
size_start <- c(1,1,1)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = bb,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = as.matrix(bb),
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = bb,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
x_vars_arg = x_vars,
y_arg = y,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
View(results)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = bb,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
traceback()
install.packages("C:/Users/hitun/Downloads/package/HMRFHiC_0.1.0.tar.gz", repos = NULL, type = "source")
library(HMRFHiC)
bb <- get_data(
file_path      = "C:/Users/hitun/Downloads/package/BG3_WT_merged_hic_chr4_2Kb.cool",
chr            = "chr4",
start          = 1,
end            = 40000,
resolution     = 2000,
genome_package = "BSgenome.Dmelanogaster.UCSC.dm6",
acc_wig        = "C:/Users/hitun/Downloads/package/other/BG3.r2c.dhs.density.wig",
chain_file     = "C:/Users/hitun/Downloads/package/dm3ToDm6.over.chain",
te_granges     = "C:/Users/hitun/Downloads/package/dm6_TEs_chr4.gtf.gz"
)
processed <- process_data(bb, N=20, scale_max=500, standardization_y=TRUE)
x_vars <- processed$x_vars
y <- processed$y
N <- 20
gamma_prior <- 0.3
iterations <- 2000
theta_start <- 0.5
size_start <- c(1,1,1)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
mydata = bb,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
y = y,
x_vars = x_vars,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZINB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
y = y,
x_vars = x_vars,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "NB",
size_start = size_start,
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
y = y,
x_vars = x_vars,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "ZIP",
mc_cores = 1
)
results <- run_chain_betas(
N = N,
gamma_prior = gamma_prior,
iterations = iterations,
y = y,
x_vars = x_vars,
theta_start = theta_start,
use_data_priors = TRUE,
distance_metric = "manhattan",
dist = "Poisson",
mc_cores = 1
)
install.packages("C:/Users/hitun/Downloads/package/HMRFHiC_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/hitun/Downloads/package/HMRFHiC_0.1.0.tar.gz", repos = NULL, type = "source")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version = "devel")
setwd("C:/Users/hitun/Downloads/package/HMRFHiC")
devtools::build()
