// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_metropolis_MCMC_betas
List run_metropolis_MCMC_betas(int N, double gamma_prior, int iterations, List x_vars, NumericMatrix y, bool use_data_priors, Nullable<List> user_fixed_priors, std::string dist, Nullable<double> epsilon, std::string distance_metric, Nullable<NumericMatrix> size_start, Nullable<double> theta_start);
RcppExport SEXP _HMRFHiC_run_metropolis_MCMC_betas(SEXP NSEXP, SEXP gamma_priorSEXP, SEXP iterationsSEXP, SEXP x_varsSEXP, SEXP ySEXP, SEXP use_data_priorsSEXP, SEXP user_fixed_priorsSEXP, SEXP distSEXP, SEXP epsilonSEXP, SEXP distance_metricSEXP, SEXP size_startSEXP, SEXP theta_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_prior(gamma_priorSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< List >::type x_vars(x_varsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type use_data_priors(use_data_priorsSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type user_fixed_priors(user_fixed_priorsSEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_metric(distance_metricSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type size_start(size_startSEXP);
    Rcpp::traits::input_parameter< Nullable<double> >::type theta_start(theta_startSEXP);
    rcpp_result_gen = Rcpp::wrap(run_metropolis_MCMC_betas(N, gamma_prior, iterations, x_vars, y, use_data_priors, user_fixed_priors, dist, epsilon, distance_metric, size_start, theta_start));
    return rcpp_result_gen;
END_RCPP
}
// Neighbours_combined
NumericMatrix Neighbours_combined(NumericMatrix potts_data, int N, Nullable<NumericMatrix> proposed_value);
RcppExport SEXP _HMRFHiC_Neighbours_combined(SEXP potts_dataSEXP, SEXP NSEXP, SEXP proposed_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type potts_data(potts_dataSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type proposed_value(proposed_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(Neighbours_combined(potts_data, N, proposed_value));
    return rcpp_result_gen;
END_RCPP
}
// pz_123
NumericMatrix pz_123(NumericMatrix z, NumericMatrix sum_neighbours, NumericMatrix y, Function pred_combined, List chains, NumericVector chain_gamma, List x_vars, double theta, NumericMatrix size_chain, int N, int iter, std::string dist);
RcppExport SEXP _HMRFHiC_pz_123(SEXP zSEXP, SEXP sum_neighboursSEXP, SEXP ySEXP, SEXP pred_combinedSEXP, SEXP chainsSEXP, SEXP chain_gammaSEXP, SEXP x_varsSEXP, SEXP thetaSEXP, SEXP size_chainSEXP, SEXP NSEXP, SEXP iterSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sum_neighbours(sum_neighboursSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Function >::type pred_combined(pred_combinedSEXP);
    Rcpp::traits::input_parameter< List >::type chains(chainsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chain_gamma(chain_gammaSEXP);
    Rcpp::traits::input_parameter< List >::type x_vars(x_varsSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type size_chain(size_chainSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< std::string >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(pz_123(z, sum_neighbours, y, pred_combined, chains, chain_gamma, x_vars, theta, size_chain, N, iter, dist));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HMRFHiC_run_metropolis_MCMC_betas", (DL_FUNC) &_HMRFHiC_run_metropolis_MCMC_betas, 12},
    {"_HMRFHiC_Neighbours_combined", (DL_FUNC) &_HMRFHiC_Neighbours_combined, 3},
    {"_HMRFHiC_pz_123", (DL_FUNC) &_HMRFHiC_pz_123, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_HMRFHiC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
